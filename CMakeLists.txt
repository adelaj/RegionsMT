# Run samples: 
#     cmake -D CMAKE_GENERATOR_PLATFORM="x64" -D MSVC="true" ..\RegionsMT\
#     cmake -D CMAKE_GENERATOR_PLATFORM="x64" -D MSVC="true" -D CMAKE_LIBRARY_PATH="../lib" -D FORCE_POSIX_THREADS="ON"  ..\RegionsMT\

cmake_minimum_required(VERSION 3.14)

macro(msvc_set_static_runtime)
    set(_vars CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELEASE CMAKE_C_FLAGS_RELWITHDEBINFO)
    foreach(_var IN ITEMS ${_vars})
        string(REGEX REPLACE "/MD" "/MT" ${_var} "${${_var}}")
    endforeach()
endmacro()

function(assign_source_group filter src_dir list)
    unset(_tmp)
    foreach(_s IN ITEMS ${${list}})
        get_filename_component(_f "${_s}" DIRECTORY)
        file(TO_NATIVE_PATH "${filter}/${_f}" _f)
        get_filename_component(_p "${src_dir}/${_s}" ABSOLUTE)
        source_group("${_f}" FILES ${_p})
        set(_tmp ${_tmp} ${_p})
        file(TO_NATIVE_PATH ${_p} _p)
        message(STATUS "File \"${_p}\" added to the group \"${filter}\"")
    endforeach()
    set(${list} ${_tmp} PARENT_SCOPE)
endfunction(assign_source_group)

macro(add_libraries)
    foreach(_lib IN ITEMS ${ARGN})
        get_filename_component(_p "${CMAKE_LIBRARY_PATH}/${_lib}-$(Platform)" ABSOLUTE)
        include_directories(${_p})
        if (MSVC)
            file(TO_NATIVE_PATH "${_p}/$(Configuration)" _p)
            set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LIBPATH:\"${_p}\"")
        endif()
        message(STATUS "Library \"${_lib}\" added to the project")
    endforeach()
endmacro()

macro(disable_incremental flag)
    string(REPLACE "/INCREMENTAL:YES" "" _tmp ${${flag}})
    string(REPLACE "/INCREMENTAL" "" _tmp ${${flag}})
    set(${flag} "/INCREMENTAL:NO ${_tmp}")
endmacro()

macro(link_libraries target)
    foreach(_lib IN ITEMS ${ARGN})
        set(_libs ${_libs} ${library_files_${_lib}})
    endforeach()
    target_link_libraries(${target} ${_libs})
endmacro()

set(target RegionsMT)
set(src_dir src)
set(libraries gsl)
set(library_files_gsl gsl gslcblas)

project(${target})
enable_language(C)

option(FORCE_POSIX_THREAD "Enable POSIX threads instead of direct usage of WinAPI" OFF)

if (MSVC)
    msvc_set_static_runtime()
    remove_definitions(-D_MBCS)
    add_definitions(-D_UNICODE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W4 /GL /arch:AVX /volatile:ms")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LTCG")
    disable_incremental(CMAKE_EXE_LINKER_FLAGS_DEBUG)
    disable_incremental(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO)
    if (${FORCE_POSIX_THREADS})
        add_definitions(-DFORCE_POSIX_THREADS -DPTW32_STATIC_LIB)
        set(libraries ${libraries} pthread-win32)
        set(library_files_pthread-win32 pthreadVSE)
    endif()
endif()

if (NOT DEFINED CMAKE_LIBRARY_PATH)
    set(CMAKE_LIBRARY_PATH "..")
    message(STATUS "Variable \"CMAKE_LIBRARY_PATH\" is undefined. Default value \"..\" is used")
endif()

add_libraries(${libraries})

file(GLOB_RECURSE source_list RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}/${src_dir}/" *.c)
assign_source_group("Source Files" ${src_dir} source_list)
file(GLOB_RECURSE header_list RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}/${src_dir}/" *.h)
assign_source_group("Header Files" ${src_dir} header_list)

add_executable(${target} ${source_list} ${header_list})
link_libraries(${target} ${libraries})