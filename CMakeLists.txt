cmake_minimum_required(VERSION 3.14)

macro(msvc_set_static_runtime)
    set(_vars CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELEASE CMAKE_C_FLAGS_RELWITHDEBINFO)
    foreach(_var IN ITEMS ${_vars})
        string(REGEX REPLACE "/MD" "/MT" ${_var} "${${_var}}")
    endforeach()
endmacro()

function(assign_source_group filter src_dir list)
    unset(_tmp)
    foreach(_s IN ITEMS ${${list}})
        get_filename_component(_f "${_s}" DIRECTORY)
        get_filename_component(_p "${src_dir}/${_s}" ABSOLUTE)
        if(MSVC)
            file(TO_NATIVE_PATH "${filter}/${_f}" _f)
            source_group("${_f}" FILES ${_p})
        elseif(XCODE)
            string(REPLACE "/" "\\\\" _f "${_f}")
            source_group("${filter}\\\\${_f}" FILES ${_p})
        endif()
        set(_tmp ${_tmp} ${_p})
        file(TO_NATIVE_PATH ${_p} _p)
        # message(STATUS "File \"${_p}\" added to the group \"${filter}\"")
    endforeach()
    set(${list} ${_tmp} PARENT_SCOPE)
endfunction(assign_source_group)

macro(add_libraries)
    foreach(_lib IN ITEMS ${ARGN})
        if (MSVC)
            get_filename_component(_p "${CMAKE_LIBRARY_PATH}/${_lib}-$(Platform)" ABSOLUTE)
            include_directories(${_p})
            file(TO_NATIVE_PATH "${_p}/$(Configuration)" _p)
            set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LIBPATH:\"${_p}\"")
        else()
            link_directories(${_p}-${CMAKE_OSX_ARCHITECTURES})
        endif()
        # message(STATUS "Library \"${_lib}\" added to the project")
    endforeach()
endmacro()

macro(disable_incremental flag)
    string(REPLACE "/INCREMENTAL:YES" "" _tmp ${${flag}})
    string(REPLACE "/INCREMENTAL" "" _tmp ${${flag}})
    set(${flag} "/INCREMENTAL:NO ${_tmp}")
endmacro()

macro(link_libraries target)
    foreach(_lib IN ITEMS ${ARGN})
        set(_libs ${_libs} ${library_files_${_lib}})
    endforeach()
    target_link_libraries(${target} ${_libs})
endmacro()

set(target RegionsMT)
set(src_dir src)
set(libraries gsl)
set(library_files_gsl gsl gslcblas)

set(MSVC OFF)
set(XCODE OFF)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
enable_testing()

if(${CMAKE_GENERATOR} MATCHES "Visual Studio")
    set(MSVC ON)
elseif(${CMAKE_GENERATOR} MATCHES "Xcode")
    set(XCODE ON)
endif()

project(${target})
include(CheckIPOSupported)
check_ipo_supported()
enable_language(C)


option(FORCE_POSIX_THREAD "POSIX threads library is used instead of WinAPI" OFF)
option(MSVC_RUNTIME_DYNAMIC "Use dynamically-linked runtime" OFF) 
 
if (MSVC)
    if(NOT MSVC_RUNTIME_DYNAMIC)
        msvc_set_static_runtime()
    else()
        add_definitions(-D_DLL)
    endif()
    remove_definitions(-D_MBCS)
    add_definitions(-D_UNICODE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W4 /GL /arch:AVX /volatile:ms")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LTCG")
    disable_incremental(CMAKE_EXE_LINKER_FLAGS_DEBUG)
    disable_incremental(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO)
    if (${FORCE_POSIX_THREADS})
        add_definitions(-DFORCE_POSIX_THREADS -DPTW32_STATIC_LIB)
        set(libraries ${libraries} pthread-win32)
        set(library_files_pthread-win32 pthreadVSE2)
    endif()
elseif(XCODE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx")
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -flto")
    set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -flto")
endif()

if (NOT DEFINED CMAKE_LIBRARY_PATH)
    set(CMAKE_LIBRARY_PATH "..")
    # message(STATUS "Variable \"CMAKE_LIBRARY_PATH\" is undefined. Default value \"..\" is used")
endif()

add_libraries(${libraries})

file(GLOB_RECURSE source_list RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}/${src_dir}/" *.c)
assign_source_group("Source Files" ${src_dir} source_list)
file(GLOB_RECURSE header_list RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}/${src_dir}/" *.h)
assign_source_group("Header Files" ${src_dir} header_list)

add_executable(${target} ${source_list} ${header_list})
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${target})
set_property(TARGET ${target} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
link_libraries(${target} ${libraries})
