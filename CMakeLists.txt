cmake_minimum_required(VERSION 3.12)

function (assign_source_group filter src_dir list)
    unset(_tmp)
    foreach (_s IN ITEMS ${${list}})
        get_filename_component(_f "${_s}" DIRECTORY)
        string(REGEX REPLACE "(/\.)*/+$" "" _f "${filter}/${_f}")
        get_filename_component(_p "${src_dir}/${_s}" ABSOLUTE)
        if (MSVC)
            file(TO_NATIVE_PATH "${_f}" _f)
            source_group("${_f}" FILES ${_p})
        elseif (XCODE)
            string(REPLACE "/" "\\\\" _f "${_f}")
            source_group("${_f}" FILES ${_p})
        endif ()
        set(_tmp ${_tmp} ${_p})
        file(TO_NATIVE_PATH ${_p} _p)
        # message(STATUS "File \"${_p}\" added to the group \"${filter}\"")
    endforeach ()
    set(${list} ${_tmp} PARENT_SCOPE)
endfunction (assign_source_group)

set(target RegionsMT)
set(src_dir src)

set(MSVC OFF)
set(XCODE OFF)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
enable_testing()

if(${CMAKE_GENERATOR} MATCHES "Visual Studio")
    set(MSVC ON)
elseif(${CMAKE_GENERATOR} MATCHES "Xcode")
    set(XCODE ON)
endif()

project(${target} LANGUAGES C)
include(CheckIPOSupported)
check_ipo_supported()

enable_language(C)

file(GLOB_RECURSE source_list RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}/${src_dir}" "${src_dir}/*.c")
assign_source_group("Source Files" ${src_dir} source_list)
file(GLOB_RECURSE header_list RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}/${src_dir}" "${src_dir}/*.h")
assign_source_group("Header Files" ${src_dir} header_list)

add_executable(${target} ${source_list} ${header_list})
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${target})
set_property(TARGET ${target} PROPERTY INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE)